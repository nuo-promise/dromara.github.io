<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Myth on dromara(Open source organization)</title><link>/projects/myth/</link><description>Recent content in Myth on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/projects/myth/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo User</title><link>/projects/myth/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/dubbo-user/</guid><description>Add myth-annotation dependency to Dubbo api project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Myth annotation to the Dubbo Interface method and set the name of the message queue, which is the queue from which the messaging middleware sends messages. @Myth(destination = &amp;quot;account&amp;quot;) boolean payment(AccountDTO accountDTO); In the Dubbo service provider (the participating method of the transaction, the callee ).
add myth-dubbo dependency</description></item><item><title>Motan User</title><link>/projects/myth/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/motan-user/</guid><description>Add myth-annotation dependency to motan api project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Myth annotation to the motan Interface method and set the name of the message queue, which is the queue from which the messaging middleware sends messages. @Myth(destination = &amp;quot;account&amp;quot;) boolean payment(AccountDTO accountDTO); In the motan service provider (the participating method of the transaction, the callee).
add myth-motan dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description></item><item><title>Myth Configuration</title><link>/projects/myth/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/config/</guid><description>source code parsing for annotation /** * Myth is the annotation of distributed transaction framework. */ @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) public @interface Myth { /** * The destination name for this listener, resolved through the container-wide */ String destination(); /** * Target interface class * If you are a SpringCloud user, you need to specify the target interface service. * (Since SpringCloud is an HTTP request that cannot be invoked through reflection</description></item><item><title>Myth Introduction</title><link>/projects/myth/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/overview/</guid><description>An open source framework that uses message queue to solve distributed transactions. Developed based on Java language (JDK1.8), it supports Dubbo, SpringCloud, Motan and other RPC frameworks for distributed transactions.
Features Integrate spring-boot-starter. RPC framework support: dubbo,motan,springcloud. Message middleware suooprt : jms(activimq), amqp(rabbitmq), kafka, roceketmq. Local transaction storage support: redis, mogondb, zookeeper, file, mysql. Transaction log serialization support ：java，hessian，kryo，protostuff. Aspect AOP facets are used to integrate with Spring and support clustering, high availability and high concurrency.</description></item><item><title>Myth-admin startup tutorial</title><link>/projects/myth/start-myth-admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/start-myth-admin/</guid><description>Startup premise: the distributed transaction project has been deployed and running, and users use it according to their own RPC framework.
First, the JDK must be 1.8+, and Git and Maven are installed locally. Execute the following command.
git clone https://github.com/yu199195/myth.git maven clean install Open the project with your development tool，for example Idea , Eclipse.
Step One: Edit application.properties in myth-admin project. server.port=8888 server.</description></item><item><title>Quick Start Dubbo</title><link>/projects/myth/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/quick-start-dubbo/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-dubbo
Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware
spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title>Quick Start Motan</title><link>/projects/myth/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/quick-start-motan/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-motan
Modifiy application.yml on Indicator Item And Modifiy you jdbc url And zookeeper url And choose you Message Oriented Middleware
spring: motan: zookeeper: 192.168.1.148:2181 datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title>Quick Start SpringCloud</title><link>/projects/myth/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/quick-start-springcloud/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-springcloud
run EurekaServerApplication.java
Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware
spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title>SpringCloud User</title><link>/projects/myth/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/springcloud-user/</guid><description>In the springcloud service provider (the participating method of the transaction, the called party). add myth-springcloud dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Configure MythTransactionBootstrap to start the class, either as XML or as @Bean. Specific configuration can refer to here:configuration for details. &amp;lt;context:component-scan base-package=&amp;quot;com.github.myth.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;mythTransactionBootstrap&amp;quot; class=&amp;quot;com.github.myth.core.bootstrap.MythTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;repositorySuffix&amp;quot; value=&amp;quot;account-service&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorQueueMax&amp;quot; value=&amp;quot;5000&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorThreadMax&amp;quot; value=&amp;quot;8&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;rejectPolicy&amp;quot; value=&amp;quot;Abort&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;blockingQueueType&amp;quot; value=&amp;quot;Linked&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;repositorySupport&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property</description></item></channel></rss>