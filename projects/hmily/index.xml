<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hmily on dromara(Open source organization)</title><link>/projects/hmily/</link><description>Recent content in Hmily on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/projects/hmily/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo Quick Start</title><link>/projects/hmily/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-dubbo/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA) and Locate on hmily-demo-dubbo Module Configuring（hmily-demo-dubbo-account module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?useUnicode=true&amp;amp;characterEncoding=utf8 # replace with your db_host_ip and db_host_port username: root # replace with your db username password: your_password # replace with your db user password Modify hmily.</description></item><item><title>Dubbo user guide</title><link>/projects/hmily/user-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-dubbo/</guid><description>The Dubbo Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions.
public interface HelloService { @Hmily void say(String hello); } The project with Dubbo implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Grpc Quick Start</title><link>/projects/hmily/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-grpc/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA) and Locate on hmily-demo-grpc Module Configuring（hmily-demo-grpc-accoun module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?useUnicode=true&amp;amp;characterEncoding=utf8 # replace with your db_host_ip and db_host_port username: root # replace with your db username password: your_password # replace with your db user password Modify hmily.</description></item><item><title>Grpc User Guide</title><link>/projects/hmily/user-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-grpc/</guid><description>Grpc User Guide Unary synchronous calls to GRPC are supported only at present.
Introduce the jar packages
Introduce the Hmily configuration
Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Introduce The Maven dependency Spring-Namespace
Introduce the hmily-grpc dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-grpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below:
&amp;lt;!--Configure the base packages that the Hmily framework need to scan --&amp;gt; &amp;lt;context:component-scan base-package=&amp;quot;org.</description></item><item><title>Hmily Annotation</title><link>/projects/hmily/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/annotation/</guid><description>@Hmily /** * The annotation Hmily. * * @author xiaoyu */ @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Hmily { } This annotation is the interface identification of Hmily Distributed Transaction,it indicated that the interface participates in Hmily Distributed Transaction. @HmilyTCC @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface HmilyTCC { /** * Confirm method string. * * @return the string */ String confirmMethod() default &amp;quot;&amp;quot;; /** * Cancel method string. * * @return the string */ String cancelMethod() default &amp;quot;&amp;quot;; /** * Pattern pattern enum.</description></item><item><title>Hmily Introduction</title><link>/projects/hmily/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/overview/</guid><description>What&amp;rsquo;s Hmily？ Hmily is a high-performance, zero penetration, financial-level distributed transactions solution. At present, it mainly provides support for flexible transactions, including TCC, TAC (in which, it will automatically generate rollback SQL) schemes, and XA and more schemes will be supported in the future.
Features High reliability : It supports abnormal transaction rollback and transaction overtime abnormal recovery to prevent transaction suspension in distributed scenarios.
Ease of use : It provides zero penetration Spring-Boot and Spring-Namespace schemes to integrate with business systems quickly.</description></item><item><title>Hmily Metrics</title><link>/projects/hmily/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/metrics/</guid><description>Hmily Metrics At present,Prometheus is used to collect metrics in hmily&amp;rsquo;s metrics module, and the pull mode is used to expose metrics information interface.
The metrics collected fall into two fundamental categories:
JVM information to application: Memory, CPU, Thread Usage, etc.
Transaction information: including the transactions total, the transaction latency, the transaction status, the transaction role.
Hmily Metrics in detail How to show You can pull the metrics information from the metrics configuration of application via Grafana.</description></item><item><title>Hmily Team</title><link>/projects/hmily/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/team/</guid><description> Project members (the names not listed in order) Name github Role Company Xiao Yu yu199195 VP JD Zhang Yong Lun tuohai666 committer JD Zhao Jun cherrylzhao committer China Unicom Chen Bin prFor committer A startup company Jiang Xiao Feng SteNicholas committer Alibaba Cloud Li Lang cysy-lli committer Ctrip Tang Yu Dong tydhot committer perfma</description></item><item><title>Hmily Term</title><link>/projects/hmily/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/term/</guid><description>Term Initiator: The initiator of a global transaction, the first place where transactions need to be performed on distributed resources in a request link resource method. In the Hmily framework, it can be expressed as: a request first encounters @HmilyTCC or @HmilyTAC annotated method, the method which application belongs to is called the initiator.
Participants: Distributed services or resources that need to participate in a distributed transaction scenario together with other services.</description></item><item><title>Hmily Transaction Context</title><link>/projects/hmily/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/context/</guid><description>Hmily Transaction Context @Data public class HmilyTransactionContext { /** * transId. */ private Long transId; /** * participant id. */ private Long participantId; /** * participant ref id. */ private Long participantRefId; /** * this hmily action. */ private int action; /** * Transaction Participant Role. */ private int role; /** * transType. */ private String transType; } HmilyTransactionContext is the core class used by the Hmily distributed transaction framework to pass the transaction context when making RPC calls.</description></item><item><title>Hmily-Admin</title><link>/projects/hmily/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/admin/</guid><description>Hmily-Admin startup tutorial (not completed）: Admin is the background management system for viewing transaction logs in Hmily. It has many features, Such as viewing abnormal logs, modifying the number of retries and so on.
First, make sure that your project is using Hmily and is running properly.
Second, the JDK used by the user must be 1.8+. Git and Maven are installed locally, then execute the following command</description></item><item><title>Hmily-Config</title><link>/projects/hmily/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config/</guid><description>Configuration Detail： File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
hmily: server: configMode: local appName: xiaoyu # The following configuration will be read when server.configMode equals local config: appName: xiaoyu serializer: kryo contextTransmittalMode: threadLocal scheduledThreadMax: 16 scheduledRecoveryDelay: 60 scheduledCleanDelay: 60 scheduledPhyDeletedDelay: 600 scheduledInitDelay: 30 recoverDelayTime: 60 cleanDelayTime: 180 limit: 200 retryMax: 10 bufferSize: 8192 consumerThreads: 16 asyncRepository: true autoSql: true phyDeleted: true storeDays: 3 repository: mysql repository: database: driverClassName: com.</description></item><item><title>Hmily-Config-Apollo</title><link>/projects/hmily/config-apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-apollo/</guid><description>Local Configuration File Name : hmily.yml.
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = apollo
The framework will pull the configuration according to your configured apollo.
hmily: server: configMode: apollo appName: # The following configuration will be read when server.</description></item><item><title>Hmily-Config-Consul</title><link>/projects/hmily/config-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-consul/</guid><description>Local Configuration File Name: hmily.yml。
Path: The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = consul
The framework will pull the configuration according to your configured consul.
hmily: server: configMode: consul appName: xxxxx remote: consul: hostAndPort: 127.</description></item><item><title>Hmily-Config-Etcd</title><link>/projects/hmily/config-etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-etcd/</guid><description>Local Configuration File Name: hmily.yml. Path: The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource The specific contents are as follows : Notice setting hmily.server.configMode = etcd The framework will pull the configuration according to your configured etcd. hmily: server: configMode: etcd appName: xxxxx # The following</description></item><item><title>Hmily-Config-Local</title><link>/projects/hmily/config-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-local/</guid><description>Local Configuration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = local
All configurations of the framework base on your local configuration files.
Notice that the configurations of repository are extensions of SPI, you can select one from those modes, which don&amp;rsquo;t have to be configured all.</description></item><item><title>Hmily-Config-Nacos</title><link>/projects/hmily/config-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-nacos/</guid><description>Local Conguration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = naocs
The framework will pull the configuration from your configured nacos.
hmily: server: configMode: nacos appName: # The following configuration will be read when server.</description></item><item><title>Hmily-Config-Zookeeper</title><link>/projects/hmily/config-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-zookeeper/</guid><description>Local Configuration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = zookeeper
The framework will pull the configuration from your configured zookeeper.
hmily: server: configMode: zookeeper appName: # The following configuration will be read when server.</description></item><item><title>Hmily-TAC</title><link>/projects/hmily/tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tac/</guid><description>TAC The TAC mode is actually a variant of the TCC mode. Just as the name implies, the TAC mode is called automatic rollback. As compared with the TCC mode, the user doesn&amp;rsquo;t have to concern about how to write the rollback method at all. and then it can reduces user development volume and is entirely transparent to users.
TAC Mode is only suitable for Relational Database.
TAC Mode will intercept the user&amp;rsquo;s SQL statement to generate reverse rollback SQL, and the compatibility of SQL will also be a ordeal.</description></item><item><title>Hmily-code-conduct</title><link>/projects/hmily/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/code-conduct/</guid><description>Development Guidelines Intentions Write codes with heart. Pursue clean, simplified and extremely elegant codes. Readable The code is unambiguous, and the intention of the code is revealed through reading rather than debugging. Tidy Agree with concepts in and . Consistent Be familiar with codes already had, to keep consistent with the style and use. Simplified Express meaning with the least code. Highly reusable, no duplicated codes or configurations. Delete codes out of use in time.</description></item><item><title>Hmily-committer</title><link>/projects/hmily/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/committer/</guid><description>Committer Promotion After you have made a lot of contributions, the community will invite you join Committers
Become a committer you will have
Hmily repository write permissions
Idea free license
Committer Responsibilities Develop new features; Refactor codes; Review pull requests reliably and in time; Consider and accept feature requests; Answer questions; Update documentation and example; Improve processes and tools; Guide new contributors join community. Committer Routine Committer needs to check the list of pull requests and issues to be processed in the community on a daily basis and assign them to the appropriate committer, that is, assignee.</description></item><item><title>Hmily-contributor</title><link>/projects/hmily/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/contributor/</guid><description>You can report a bug, submit a new function enhancement suggestion, or submit a pull request directly.
Submit an Issue Before submitting an issue, please go through a comprehensive search to make sure the problem cannot be solved just by searching. Check the Issue List to make sure the problem is not repeated. Create a new issue and choose the type of issue. Define the issue with a clear and descriptive title.</description></item><item><title>Hmily-tcc</title><link>/projects/hmily/tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tcc/</guid><description>TCC The TCC Mode is a classic flexible transaction solution that needs the users to provided try, confirm, cancel methods. The try, confirm methods will be invoked under normal circumstances,and the try, cancel methods will be invoked as an exception occurs. the confirm method is not required,it entirely depends on the users how to implement the try method. the both confirm and cancel method also need the users to guarantee the idempotency, but it will bring addtional workload to the users.</description></item><item><title>Motan Quick Start</title><link>/projects/hmily/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-motan/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-dubbo Module and Run Build with Maven Configuring（hmily-demo-motan-account module for instance） Configure with your business database in application.yml(account module for instance) spring: datasource: driver-class-name: com.</description></item><item><title>Motan User Guide</title><link>/projects/hmily/user-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-motan/</guid><description>Motan Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions. public interface HelloService { @Hmily void say(String hello); } The project with Motan implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Questions</title><link>/projects/hmily/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/faq/</guid><description>I have imported the jar package to my project, but found that my project cannot be started, what should I do if any error reported? Answer : When you meet this kind of error, it requires you to locate the problem yourself, you can check the items as bellow: check whether the framework configuration is carried out according to the document whether your project runtime environment is correct whether there is any dependency conflict problem If your problem is still present after above check items, you can provide an issue on github of this project, our team will provide technique support as soon as possible.</description></item><item><title>SOFA-RPC User Guide</title><link>/projects/hmily/user-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-rpc/</guid><description>SOFA-RPC Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions.
public interface HelloService { @Hmily void say(String hello); } The project with SOFA-RPC implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Spring Cloud User Guide</title><link>/projects/hmily/user-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-springcloud/</guid><description>Spring-Cloud User Guide Step 1: Introduce the jar packages
Step 2: Introduce the Hmily configuration
Step 3: Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Step 4: Add @Hmily annotation on the feignClient call method(Consumer side).
1.Introduce The Maven dependency Spring-Namespace Introduce the hmily-springcloud dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below: &amp;lt;!</description></item><item><title>SpringCloud Quick Start</title><link>/projects/hmily/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-springcloud/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-dubbo Module and Run Build with Maven Run with EurekaServerApplication.java in hmily-demo-springcloud-eureka project. Configuring（hmily-demo-springcloud-account module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.</description></item><item><title>Tars Quick Start</title><link>/projects/hmily/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-tars/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Setting tars nodes Build tars nodes with following information refering to here:
APP: TestInventory, Server Name: InventoryApp, OBJ: InventoryObj, Port: 29740 APP: HmilyAccount, Server Name: AccountApp, OBJ: AccountObj, Port: 10386 With nodes built, run mvn clean package packaging command respectively under hmily-demo-tars-springboot-account and hmily-demo-tars-springboot-inventory directories, and publish with outputs on previous nodes set.</description></item><item><title>Tars User Guide</title><link>/projects/hmily/user-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-tars/</guid><description>Tars User Guide Step 1: Introduce the jar packages
Step 2: Introduce the Hmily configuration
Step 3: Add @Hmily annotation on the auto-generated Servant interface method which required the Hmily Distributed Transaction.
Step 4: Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Introduce The Maven dependency Spring-Namespace
Introduce the hmily-tars dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-tars&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below:</description></item><item><title>sofa-rpc Quick Start</title><link>/projects/hmily/quick-start-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-rpc/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-sofa Module and Run Build with Maven Configuring（hmily-demo-sofa-account module for instance） Configure with your business database in application.yml spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?</description></item></channel></rss>