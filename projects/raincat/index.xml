<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raincat on dromara(Open source organization)</title><link>/projects/raincat/</link><description>Recent content in Raincat on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/projects/raincat/index.xml" rel="self" type="application/rss+xml"/><item><title>Bootstrap raincat-admin</title><link>/projects/raincat/admin-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/admin-starter/</guid><description>Bootstrap raincat-admin Prerequisite of bootstrap: The distributed transaction has been deployed and in running. You can choose RPC framework in follows whatever you want.
Dubbo user Springcloud user Bootstrap method Method1: Package and deploy by yourself First of all, the JDK version must be 1.8+ and Git and Maven are installed locally, then execute the following commands. git clone https://github.com/yu199195/Raincat.git maven clean install Secondly, please use your dev tool to open the project, such as IDEA, Eclipse.</description></item><item><title>Bootstrap raincat-manager</title><link>/projects/raincat/raincat-manager-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/raincat-manager-starter/</guid><description>Bootstrap raincat-manager Bootstrap method Method 1: Pull the code from github and compile it by yourself: https://github.com/yu199195/Raincat Modify the Redis configuration in application.yml. transactionWaitMaxTime: 500 redisSaveMaxTime: 3000 tx: manager: netty : port: 9998 serialize: kryo maxConnection: 100 maxThreads : 16 delayTime : 5 heartTime : 20 redis : cluster : false hostName : 192.168.1.91 port: 6379 password : foobaredbbexONE123 transactionWaitMaxTime is the transaction maximum waiting time.</description></item><item><title>Dubbo user configuration</title><link>/projects/raincat/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/dubbo-user/</guid><description>Firstly, you should bootstrap raincat-manager, please refer to how to bootstrap Txmanager for details. Then, please add dependency in maven at your Dubbo service, and add @TxTransaction annotation in your distributed transaction method. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>Motan user guide</title><link>/projects/raincat/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/motan-user/</guid><description>Firstly, you should bootstrap raincat-manager, please refer to how to bootstrap Txmanager for details. Then, please add following dependency in maven at your service, and add @TxTransaction annotation in your distributed transaction method. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-motan&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>Raincat Introduction</title><link>/projects/raincat/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/overview/</guid><description>Raincat Strongly consistent distributed transactions are implemented based on two-phase commit + local transaction compensation mechanism. Principle
It is based on Java language (JDK1.8), supports Dubbo, Motan, Springcloud for distributed transactions.
Due to the file name is too long, you can executes git config --global core.longpaths true when pulling the code.
Features Frame features
Seamlessly integrate spring or spring boot.
Support Dubbo, Motan, Springcloud, and other RPC frameworks for distributed transactions.</description></item><item><title>Springcloud user guide</title><link>/projects/raincat/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/springcloud-user/</guid><description>Firstly, you should bootstrap raincat-manager, please refer to how to bootstrap Txmanager for details. Then, please add following dependency in maven at your service, and add @TxTransaction annotation in your distributed transaction method. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>TxTransactionBootstrap Configuration</title><link>/projects/raincat/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/config/</guid><description>@TxTransaction annotation This annotation is the aspect of distributed transaction, it need to be added when the business side need distributed transaction. TxTransactionBootstrap Configurationï¼š &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.raincat.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;bufferSize&amp;quot; value=&amp;quot;4096&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettyThreadMax&amp;quot; value=&amp;quot;16&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;refreshInterval&amp;quot; value=&amp;quot;30&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;delayTime&amp;quot; value=&amp;quot;30&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;heartTime&amp;quot; value=&amp;quot;10&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;recoverDelayTime&amp;quot; value=&amp;quot;60&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;retryMax&amp;quot; value=&amp;quot;3&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationRecoverTime&amp;quot; value=&amp;quot;60&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>dubbo quick start</title><link>/projects/raincat/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-dubbo/</guid><description>Environment JDK 1.8+ Maven 3.2.x Git Redis Mysql Pull the code &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U Prepare the database Execute the SQL statement in demo. SQL statement
Configuration Please open the project in IDEA or Eclipse, and modify the Redis configuration in application.yml. tx: manager: netty : port: 9998 serialize: kryo maxConnection: 100 maxThreads : 16 delayTime : 5 heartTime : 20 redis : cluster : false hostName : 192.</description></item><item><title>springcloud quick start</title><link>/projects/raincat/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-springcloud/</guid><description>Environment JDK 1.8+ Maven 3.2.x Git Redis Mysql Pull the code &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U Prepare the database Execute the SQL statement in demo. SQL statement
Configuration Please open the project in IDEA or Eclipse, and modify the Redis configuration in application.yml. tx: manager: netty : port: 9998 serialize: kryo maxConnection: 100 maxThreads : 16 delayTime : 5 heartTime : 20 redis : cluster : false hostName : 192.</description></item></channel></rss>