<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dromara on dromara(Open source organization)</title><link>/</link><description>Recent content in Dromara on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Soul Gateway Learning Apache Dubbo Plugin</title><link>/blog/soul_source_learning_22_apache_dubbo/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_22_apache_dubbo/</guid><description>目标 Apache Dubbo 插件介绍 元数据介绍 Apache Dubbo 插件配置 Bootstrap pom 配置 soul-admin 配置 dubbo服务pom配置 Apache Dubbo 泛化调用介绍 通过API方式使用泛化调用 通过spring使用泛</description></item><item><title>Soul Gateway Learning Resilience4j Plugin</title><link>/blog/soul_source_learning_21_resilience4j/</link><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_21_resilience4j/</guid><description>目标 什么是Resilience4J soul的Resilience4j体验 限流 熔断 Resilience4J插件源码解读 什么是Resilienc</description></item><item><title>Soul Gateway Learning Sentinel Plugin</title><link>/blog/soul_source_learning_20_sentinel/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_20_sentinel/</guid><description>概述 在业务网关中熔断和流量控制都是非常必要的功能。soul在实现这部分功能时使用了不同的成熟组件，用户可以根据自己的喜好选择。本文将介绍如何</description></item><item><title>Soul Gateway Learning Redirect Plugin</title><link>/blog/soul_source_learning_19_redirect/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_19_redirect/</guid><description>介绍 Soul 网关在对目标服务进行代理调用的时候，可以使用 redirect 插件来重定向请求。其中包含两种场景：一种把 redirectUrl 配置为第三方URL 地址，直接使用 308 进行转发跳</description></item><item><title>Dromara Soul Source Code 01 Reading Sharing Session 02</title><link>/activities/dromara-cloud-native-meet-02/</link><pubDate>Sat, 06 Feb 2021 15:00:00 +0000</pubDate><guid>/activities/dromara-cloud-native-meet-02/</guid><description>Dromara source code reading (Soul 2021 first activity) Date: Sunday, February 6, 2021 Time：20:00 – 23:00 Location: Tencent Meeting Activity Details 20:00 - 20:10 The opening introduces the recent dream code sharing situation by kimming &amp;amp; 崔 20:10 - 20:25 Introduction to SPI and how Soul SPI is enhanced by zhuming 20:25 - 20:50 Introduction to Reactive Programming by Ztzzz 20:50</description></item><item><title>Soul Gateway Learning Divide Plugin Source Code Interpretation</title><link>/blog/soul_source_learning_16_divide_sxj/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_16_divide_sxj/</guid><description>插件概述 插件定位 divide 插件是一个 http 正向代理插件，所有的 http 请求都由该插件进行负载均衡处理（具体的负载均衡策略在规则中指定）。 生效时机 当请求头的 rpcType =</description></item><item><title>Soul Gateway Learning RateLimiter Plugin</title><link>/blog/soul_source_learning_18_ratelimiter/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_18_ratelimiter/</guid><description>回顾 在之前的HTTP请求初探的文章中，大体梳理了Soul插件的处理流程，也得知了DividePlugin、GlobalPlugin，WebC</description></item><item><title>Soul Gateway Learning SPI</title><link>/blog/soul_source_learning_11_spi/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_11_spi/</guid><description>SOUL 中 SPI 的使用 在之前分析 divide 插件的负载均衡策略时, 有看到过一行代码: DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); 当时很简单的略过了它的实现, 它的作用很容易分析, 调用一个看似工具</description></item><item><title>Soul Gateway Learning Sign Plugin</title><link>/blog/soul_source_learning_12_sign/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_12_sign/</guid><description>介绍 sign插件用来对请求进行签名认证的插件 AK/SK 介绍 AK/SK（Access Key ID/Secret Access Key）即访问密钥，包含访问密钥ID（AK）和秘密访问密钥（</description></item><item><title>Soul Gateway Learns Http Long Polling Analysis 02</title><link>/blog/soul_source_learning_09_httplongpolling_02/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_09_httplongpolling_02/</guid><description>后台与网关数据同步 (Http长轮询篇) 长轮询分析的最后一篇, 总结网关端的长轮询的实现, 以及数据流动方式. 网关端长轮询的流程总体也分两个模块:</description></item><item><title>Soul Gateway Learning Http Request Adventure</title><link>/blog/soul_source_learning_17_http/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_17_http/</guid><description>回顾 在Soul 请求处理概览概览这篇文章中，我们已经知晓了Soul针对于请求的处理入库在DefaultSoulPluginChain的excu</description></item><item><title>Soul Gateway Learns Nacos Data Synchronization</title><link>/blog/soul_source_learning_14_nacos/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_14_nacos/</guid><description>本篇分析一下Nacos同步数据原理 1、先配置一下环境 * soul-admin soul-admin/src/main/resources/application.yml soul: sync: nacos: url: localhost:8848 namespace: 1c10d748-af86-43b9-8265-75f487d20c6c # acm: # enabled: false # endpoint: acm.aliyun.com # namespace: # accessKey: # secretKey: soul-admin/pom.xml，这</description></item><item><title>Soul Gateway Learns Http Long Polling Analysis 01</title><link>/blog/soul_source_learning_08_httplongpolling_01/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_08_httplongpolling_01/</guid><description>后台与网关数据同步 (Http长轮询篇) 配置 后台信息模式切换 在上篇分析 Zookeeper 同步的文章 (Soul网关源码分析-11期) 中, 我们通过 DataSyncConfiguration 这个配置类做的</description></item><item><title>Soul Gateway Learns WebSocket Data Synchronization Analysis</title><link>/blog/soul_source_learning_10_websocket/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_10_websocket/</guid><description>Fanjinpeng 1.前情回顾 在第4篇中，我们分析了 HTTP 用户业务系统接入 Soul 网关后，会调用 soul-admin 的注册接口，把需要网关代理的接口信息全部注册到 soul-admin 上，在最后，会通过 websocket</description></item><item><title>Dromara Soul source code 01 reading sharing session 01</title><link>/activities/dromara-cloud-native-meet/</link><pubDate>Thu, 21 Jan 2021 15:00:00 +0000</pubDate><guid>/activities/dromara-cloud-native-meet/</guid><description>Dromara source code reading (Soul 2021 first activity) Date: Sunday, January 24, 2021 Time: 15:00 – 17:00 Location: Tencent Meeting Activity Details 15:00-15:10 Opening introduction of dream code sharing process by kimming &amp;amp; Cui
15:10-15:25 Soul data synchronization websocket by Ting
15:25-15:50 Http Discovery Sharing by Zhu Ming
15:50-16:10 Analysis based on the Sofa-Rpc protocol by Dongdong
16:10-16:25 Metrics Monitoring by Ge Tianye
16:25-16:40 Http Long Polling Sharing by Du Yuhang</description></item><item><title>Soul Gateway Learning Plugin Chain Implementation</title><link>/blog/soul_source_learning_15_plugin_chain/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_15_plugin_chain/</guid><description>一、引言 插件是 Soul 的灵魂。 Soul 使用了插件化设计思想，实现了插件的热插拔，且极易扩展。内置丰富的插件支持，鉴权，限流，熔断，防火墙等等。 Soul 是如何实</description></item><item><title>Soul Gateway Learns Zookeeper Data Synchronization 02</title><link>/blog/soul_source_learning_13_zookeeper_02/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_13_zookeeper_02/</guid><description>启动admin，与网关。 admin操作，使用zookeeper同步数据到网关 上一篇，通过soul-admin启动过程为入口，分析了soul-</description></item><item><title>Soul Gateway Learning Admin Source Code Analysis</title><link>/blog/soul_resource_learning_07_admin/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_resource_learning_07_admin/</guid><description>源码分析 页面操作源码分析 在分析源码之前，先看下图，页面显示加载的插件列表会对应后端的请求，根据后端请求，找到对应的controller类 然后</description></item><item><title>Soul Gateway Learns Zookeeper Data Synchronization 01</title><link>/blog/soul_source_learning_13_zookeeper_01/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_13_zookeeper_01/</guid><description>启动 soul-admin、soul-bootstrap， 使用zookeeper同步数据到网关 一、配置环境 1、soul-admin 服务配置，需</description></item><item><title>Soul Gateway Learning (2) HTTP Client Access Source Code Parsing</title><link>/blog/soul_source_learning_02_http_client_register/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_http_client_register/</guid><description>HTTP 用户接入 Soul 网关注册逻辑分析 1. 注册入口 HTTP 用户接入 Soul 网关时，会调用 soul-admin 一个接口，把需要 Soul 网关管理的接口注册，今天就具体看看到底干了点儿啥。 先看下</description></item><item><title>Soul Learning(2) How Does The Divide Plugin Forward Http Requests</title><link>/blog/soul_source_larning_02_divide_plugin_source/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_larning_02_divide_plugin_source/</guid><description>Divide 插件如何转发http请求 先来设想一下，网关如果收到了一个请求http://xxx.com/openapi/appname/order/fi</description></item><item><title>Soul Learning(2) Use Divide Plugin</title><link>/blog/soul_source_learning_02_divide_plugin/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_divide_plugin/</guid><description>Divide 插件使用 一、启动项目 先启动soul-bootstrap（9195）、soul-admin（9095）两个模块，我们通过bootstrap配</description></item><item><title>Soul Gateway learning plugin chain and load balancing analysis</title><link>/blog/soul_source_learning_05_plugin/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_05_plugin/</guid><description>插件链总结 从一个类关系图说起: 其中两个最基本的插件类: SoulPlugin: 定义插件职责的接口, 重点方法execute() 被上层调用, skip() 方法可以使某些插件在某些</description></item><item><title>Soul Learning(1) Environment Configuration</title><link>/blog/soul_source_learning_01/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_01/</guid><description>Analysis of soul (1) Set up soul environment soul is a High-Performance Java API Gateway
GitHub：https://github.com/dromara/soul
document：https://dromara.org/zh-cn/docs/soul/soul.html
1. Prepare source code 1.1. Fork dromara/soul repository to my github cchenxi/soul 1.2. Clone the repository git clone https://github.com/cchenxi/soul.git 1.3.Open the source code with idea 1.4. Compile the soul source code You can compile the project as follows.
mvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true 2. Startup soul 2.</description></item><item><title>Dromara Dream Code Book Club Introduction</title><link>/activities/dromara-activites-introduce/</link><pubDate>Sun, 27 Dec 2020 15:00:00 +0000</pubDate><guid>/activities/dromara-activites-introduce/</guid><description>Dromara Dream Code Book Club（Dromara 2020 event introduction） Date: Sunday, December 27, 2020 Activity background In order to increase the enthusiasm of community participants, promote the construction of the Dromara community, exercise everyone&amp;rsquo;s expressive ability and improve the core strength of technology, the community organized this event in the form of source code reading. Activity purpose, meaning and goal Increase motivation Improve technical strength and expand everyone&amp;rsquo;s horizons Exercise language skills Promote the harmony, unity and progress of the community Make the Dromara community bigger and bigger Activity development The activity is divided into multiple phases.</description></item><item><title>One year later, the dromara team released version 2.1.1 of the new architecture Hmily distributed transaction framework</title><link>/community/hmily-2.1.1/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>/community/hmily-2.1.1/</guid><description>Thank you guys for your support all the way, and keep everyone waiting. In this version, our team refactored the entire project, reasonably divided functional modules, added configuration centers, adjusted the underlying storage structure, solved difficult bugs, and supported other new features, and absorbed more outstanding open source community members to join in. Architecture Features High availability·:</description></item><item><title>Hmily distributed transaction restart monthly report</title><link>/community/hmily-restart/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>/community/hmily-restart/</guid><description>Hmily is a flexible distributed transaction architecture with high performance, high avalibility and ease to use. At present, it provides support for Dubbo, Spring-Cloud, Motan, GRPC and other RPC frameworks. In terms of ease of use, it provides zero-intrusive rapid integration of Spring-Boot and Spring-Namespace, with the goal of building a distributed transaction solution of financial level. Adjust Hmily architecture with more reasonable module partition Architecture: Architecture adjustment: Pull out</description></item><item><title>【Soul gateway version2.2.0 release】Make high-performance gateways so easy!</title><link>/community/soul-2.2.0/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>/community/soul-2.2.0/</guid><description>Let&amp;rsquo;s take a look at the new features first, and then I would like to share my story. Completely pluggable architecture design, plug-in hot swap. Fully supports all versions of Dubbo, Alibaba-Dubbo, Apache-Dubbo. Support Dubbo generalization call, multi-parameter, complex parameter interface. Enhance the monitor plug-in and remove the Influxdb, add metrics such as memory, CPU, QPS, TPS, response delay, and support access to Prometheus. The SpringCloud plugin supports Eureka and</description></item><item><title>How convenient is the 2.1.X version of Soul Gateway?</title><link>/community/soul-2.1.x/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>/community/soul-2.1.x/</guid><description>It has been a year since I open sourced Soul gateway in October last year, and received many suggestions from you guys in community. It has provided very rich functions after optimization, many of functions are highly cusmized, visualized, and highly extensible, now let&amp;rsquo;s make a summary. Plugin Provides various plug-ins, such as signature, monitoring, rate limiting, circuit breaker, Http proxy, Dubbo proxy, Websocket, etc. Support users to quickly develop</description></item><item><title>Soul Gateway released version 1.0.4-RELEASE</title><link>/community/soul-1.0.4/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/community/soul-1.0.4/</guid><description>Soul Gateway released version 1.0.4-RELEASE Fix the bug that appeared in the Soul-admin of version 1.0.3. The serialization method supports custom extensions. The default serialization method has been changed from Kroy to Java serialization method. Dubbo support. Changes Dubbo usage In the previous version (1.0.2 or 1.0.3), the parameters of Dubbo are passed through the header, and in the 1.0.4 version it is passed through the body.</description></item><item><title>Hmily released 2.0.2-Release</title><link>/community/hmily-2.0.2/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>/community/hmily-2.0.2/</guid><description>Hmily released 2.0.2-Release Resolved the issue of SpringCloud using Hystrix to configure thread pool. New issue with SpringCloud embedded transaction calls.
Added Hmily load balancing strategy.
Other bug fixes and code optimizations.
Remove unnecessary third-party JAR packages.
Introduction of zero intrusion mode.
Hmily&amp;rsquo;s support for the popular RPC framework and Spring. Dubbo 2.7.0 for all versions below. SpringCloud Dalston and above, including support for Finchley and Greenwich</description></item><item><title>Hmily: Easy Handle Highly Concurrent Distributed Transactions</title><link>/blog/hmily_current/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>/blog/hmily_current/</guid><description>Hmily高并发事务处理 开始先打个小小的广告 Hmily在参开源中国年度受欢迎投票 https://www.oschina.net/project/top_cn_2018?origin=zhzd 点击链接，搜索Hmily帮忙投下票,在第11横排第二个，感</description></item><item><title>Hmily: High-Performance Asynchronous Distributed Transaction TCC Framework</title><link>/blog/hmily_introduction/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>/blog/hmily_introduction/</guid><description>Hmily框架特性[https://github.com/yu199195/hmily] 无缝集成Spring,Spring boot start。 无缝</description></item><item><title>A multilingual HTTP client</title><link>/projects/soul/developer-soul-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/developer-soul-client/</guid><description> Description This document focuses on how to access gateways for HTTP services in other languages. How to customize the development of soul-http-client. Customize Http Client Request Method: POST Request Path: http://soul-admin/soul-client/springmvc-register, soul-admin represents IP + Port of admin Request Params：passing JSON type parameters through the body. { &amp;quot;appName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;context&amp;quot;: &amp;quot;/xxx&amp;quot;, //required &amp;quot;path&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;pathDesc&amp;quot;: &amp;quot;xxx&amp;quot;, &amp;quot;rpcType&amp;quot;: &amp;quot;http&amp;quot;, //required &amp;quot;host&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;port&amp;quot;: xxx, //required &amp;quot;ruleName&amp;quot;: &amp;quot;xxx&amp;quot;, //required &amp;quot;enabled&amp;quot;: &amp;quot;true&amp;quot;, //required &amp;quot;registerMetaData&amp;quot;: &amp;quot;true&amp;quot; //required }</description></item><item><title>Athena Introduction</title><link>/projects/athena/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/athena/overview/</guid><description> The document is improving</description></item><item><title>Bootstrap raincat-admin</title><link>/projects/raincat/admin-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/admin-starter/</guid><description>Bootstrap raincat-admin Prerequisite of bootstrap: The distributed transaction has been deployed and in running. You can choose RPC framework in follows whatever you want.
Dubbo user Springcloud user Bootstrap method Method1: Package and deploy by yourself First of all, the JDK version must be 1.8+ and Git and Maven are installed locally, then execute the following commands. git clone https://github.com/yu199195/Raincat.git maven clean install Secondly, please use your dev tool to open the project, such as IDEA, Eclipse.</description></item><item><title>Bootstrap raincat-manager</title><link>/projects/raincat/raincat-manager-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/raincat-manager-starter/</guid><description>Bootstrap raincat-manager Bootstrap method Method 1: Pull the code from github and compile it by yourself: https://github.com/yu199195/Raincat Modify the Redis configuration in application.yml. transactionWaitMaxTime: 500 redisSaveMaxTime: 3000 tx: manager: netty : port: 9998 serialize: kryo maxConnection: 100 maxThreads : 16 delayTime : 5 heartTime : 20 redis : cluster : false hostName : 192.168.1.91 port: 6379 password : foobaredbbexONE123 transactionWaitMaxTime is the transaction maximum waiting time.</description></item><item><title>Configuration Flow Introduction</title><link>/projects/soul/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/config/</guid><description>Description This article introduces the flow of synchronizing to the gateway after the data operation of admin backend system. Usage User can arbitrary modify data in soul-admin backend and this will immediately synchronize to the jvm memory of the gateway. Synchronize the plugin data of soul,selector,rule data, metadata, signature data, etc. All the rules of plugin selectors are dynamically configured and take effect immediately without restarting the service.</description></item><item><title>Custom Plugin</title><link>/projects/soul/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-plugin/</guid><description>Description Plugins are core executors of soul gateway. Every plugin handles matched requests when enabled. There are two kinds of plugins in the soul gateway. The first type is a call chain with a single responsibility, and traffic cannot be customized. The other one can do its own chain of responsibility for matched traffic. You could reference from soul-plugin module and develop plugins by yourself. Please fire pull requests of your wonderful plugins without hesitate.</description></item><item><title>Custom Response</title><link>/projects/soul/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-result/</guid><description>Description This doc offers examples for customising response structure. The response body structure in gateways should be unified, it is recommended for specify yours. Default Implementation The default implementation class is org.dromara.soul.plugin.api.result.DefaultSoulResult. Following is the response structure. public class SoulDefaultEntity implements Serializable { private static final long serialVersionUID = -2792556188993845048L; private Integer code; private String message; private Object data; } The returned json as follows: { &amp;quot;code&amp;quot;: -100, //response code,</description></item><item><title>Custom Sign Algorithm</title><link>/projects/soul/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-sign-algorithm/</guid><description>Description Users can customize the signature authentication algorithm to achieve verification. Extension The default implementation is org.dromara.soul.plugin.sign.service.DefaultSignService. Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.dromara.soul.plugin.api.SignService. public interface SignService { /** * Sign verify pair. * * @param exchange the exchange * @return the pair */ Pair&amp;lt;Boolean, String&amp;gt; signVerify(ServerWebExchange exchange); } When returning true in Pair, the sign verification passes. If there&amp;rsquo;s false, the String in Pair will be return to the frontend to show.</description></item><item><title>Data Synchronization Design</title><link>/projects/soul/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/data-sync/</guid><description>Description This article mainly explains three ways of database synchronization and their principles.
Preface Gateway is the entrance of request and it is a very important part in micro service architecture, therefore the importance of gateway high availability is self-evident. When we use gateway, we have to change configuration such as flow rule, route rule for satisfying business requirement. Therefore, the dynamic configuration of the gateway is an important factor to ensure the high availability of the gateway.</description></item><item><title>Database Design</title><link>/projects/soul/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/database-design/</guid><description>Plugin use database to store plugin, selector, rule configuration data and relationship.
The Database Table UML Diagram: Detailed design:
One plugin corresponds to multiple selectors,one selector corresponds to multiple rules.
One selector corresponds to multiple match conditions,one rule corresponds to multiple match conditions.
Each rule handles differently in corresponding plugin according to field handler,field handler is a kind of data of JSON string type.You can view detail during the use of admin.</description></item><item><title>Dict Management</title><link>/projects/soul/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/dictionary-management/</guid><description>Explanation Dictionary management is primarily used to maintain and manage common data dictionaries. Table design sql CREATE TABLE IF NOT EXISTS `soul_dict` ( `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;primary key id&#39;, `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;type&#39;, `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary encoding&#39;, `dict_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary name&#39;, `dict_value` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary value&#39;, `desc` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary description or remarks&#39;, `sort` int(4) NOT NULL COMMENT &#39;sort&#39;, `enabled` tinyint(4) DEFAULT NULL COMMENT &#39;whether it is enabled&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; The current usage scenario is when the plugin handle configuring the data_type=3 (select box) eg.</description></item><item><title>Divide Plugin</title><link>/projects/soul/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/divide-plugin/</guid><description>Explanation Divide is the core processing plugin for gateway to process http requests. Plugin Setting Enable plugin, soul-admin &amp;ndash;&amp;gt; plugin management&amp;ndash;&amp;gt; divide set to enable.
Divide plugin，cooperate with starter to take effect，please refer to：user-http。
&amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Detail Divide is a plugin for http forward proxy, and all http requests are called by this plugin in load balancing.</description></item><item><title>Doc Download</title><link>/projects/soul/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/download/</guid><description>PDF English 中文</description></item><item><title>Dubbo Plugin</title><link>/projects/soul/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/dubbo-plugin/</guid><description>Explanation Dubbo is a plugin that converts http protocol into Dubbo protocol and it is also the key for gateway to realize dubbo generic service. Dubbo plugin needs to cooperate with metadata to realize dubbo calls, please refer to: metaData. Apache dubbo and alibaba dubbo users both use the same plugin. &amp;lt;!--if you use dubbo start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-alibab-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-apache-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; dubbo setting enable.</description></item><item><title>Dubbo Quick Start</title><link>/projects/hmily/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-dubbo/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA) and Locate on hmily-demo-dubbo Module Configuring（hmily-demo-dubbo-account module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?useUnicode=true&amp;amp;characterEncoding=utf8 # replace with your db_host_ip and db_host_port username: root # replace with your db username password: your_password # replace with your db user password Modify hmily.</description></item><item><title>Dubbo User</title><link>/projects/myth/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/dubbo-user/</guid><description>Add myth-annotation dependency to Dubbo api project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Myth annotation to the Dubbo Interface method and set the name of the message queue, which is the queue from which the messaging middleware sends messages. @Myth(destination = &amp;quot;account&amp;quot;) boolean payment(AccountDTO accountDTO); In the Dubbo service provider (the participating method of the transaction, the callee ).
add myth-dubbo dependency</description></item><item><title>Dubbo user configuration</title><link>/projects/raincat/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/dubbo-user/</guid><description>Firstly, you should bootstrap raincat-manager, please refer to how to bootstrap Txmanager for details. Then, please add dependency in maven at your Dubbo service, and add @TxTransaction annotation in your distributed transaction method. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>Dubbo user guide</title><link>/projects/hmily/user-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-dubbo/</guid><description>The Dubbo Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions.
public interface HelloService { @Hmily void say(String hello); } The project with Dubbo implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Environment Setup</title><link>/projects/soul/soul-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/soul-set-up/</guid><description>Features Soul is an open source plugin framework, which is flexibility and extensibility since 2.2.0 version. With soul you can easily create application with your own gateway. System Requirement: JDK 1.8+, Mysql 5.5.20 +. Soul-Admin remote download 2.3.0 download soul-admin-bin-2.3.0-RELEASE.tar.gz tar soul-admin-bin-2.3.0-RELEASE.tar.gz. cd /bin. use h2 store. &amp;gt; windwos : start.bat --spring.profiles.active = h2 &amp;gt; linux : ./start.sh --spring.profiles.active = h2 use mysql store. cd /conf and then modify mysql</description></item><item><title>Fetching Correct IP Address And Host</title><link>/projects/soul/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-parsing-ip-and-host/</guid><description>Description This doc demonstrates how to get correct IP address and host when soul serves behind nginx reverse proxy. After fetched real IP and host, you can match them with plugins and selectors. Default Implementation The embedded implementation in soul is :org.dromara.soul.web.forwarde.ForwardedRemoteAddressResolver。
You need to config X-Forwarded-For in nginx first to get correct IP address and host.
Implement through a Plugin Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.</description></item><item><title>File Uploading And Downloading</title><link>/projects/soul/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/file-and-image/</guid><description> description This doc gives a brief description for uploading and downloading files using soul. File Uploading The default file size limit is 10M. For custom limitation, use--file.size with an integer variable. e.g.--file.size = 30 Upload your files just as way you did before File Downloading Soul supports downloading files in streams. There is no need to change anything.</description></item><item><title>Filter Extension</title><link>/projects/soul/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-filter/</guid><description>Description This doc shows a demo for how to extend org.springframework.web.server.WebFliter. CORS Support org.dromara.soul.bootstrap.cors.CrossFilter is designed for WebFilter implementation. public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final String ALLOWED_EXPOSE = &amp;quot;*&amp;quot;; private static final String MAX_AGE = &amp;quot;18000&amp;quot;; @Override @SuppressWarnings(&amp;quot;all&amp;quot;) public Mono&amp;lt;Void&amp;gt; filter(final ServerWebExchange exchange, final WebFilterChain chain) { ServerHttpRequest request = exchange.</description></item><item><title>Grpc Quick Start</title><link>/projects/hmily/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-grpc/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA) and Locate on hmily-demo-grpc Module Configuring（hmily-demo-grpc-accoun module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?useUnicode=true&amp;amp;characterEncoding=utf8 # replace with your db_host_ip and db_host_port username: root # replace with your db username password: your_password # replace with your db user password Modify hmily.</description></item><item><title>Grpc User Guide</title><link>/projects/hmily/user-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-grpc/</guid><description>Grpc User Guide Unary synchronous calls to GRPC are supported only at present.
Introduce the jar packages
Introduce the Hmily configuration
Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Introduce The Maven dependency Spring-Namespace
Introduce the hmily-grpc dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-grpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below:
&amp;lt;!--Configure the base packages that the Hmily framework need to scan --&amp;gt; &amp;lt;context:component-scan base-package=&amp;quot;org.</description></item><item><title>Hmily Annotation</title><link>/projects/hmily/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/annotation/</guid><description>@Hmily /** * The annotation Hmily. * * @author xiaoyu */ @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Hmily { } This annotation is the interface identification of Hmily Distributed Transaction,it indicated that the interface participates in Hmily Distributed Transaction. @HmilyTCC @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface HmilyTCC { /** * Confirm method string. * * @return the string */ String confirmMethod() default &amp;quot;&amp;quot;; /** * Cancel method string. * * @return the string */ String cancelMethod() default &amp;quot;&amp;quot;; /** * Pattern pattern enum.</description></item><item><title>Hmily Introduction</title><link>/projects/hmily/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/overview/</guid><description>What&amp;rsquo;s Hmily？ Hmily is a high-performance, zero penetration, financial-level distributed transactions solution. At present, it mainly provides support for flexible transactions, including TCC, TAC (in which, it will automatically generate rollback SQL) schemes, and XA and more schemes will be supported in the future.
Features High reliability : It supports abnormal transaction rollback and transaction overtime abnormal recovery to prevent transaction suspension in distributed scenarios.
Ease of use : It provides zero penetration Spring-Boot and Spring-Namespace schemes to integrate with business systems quickly.</description></item><item><title>Hmily Metrics</title><link>/projects/hmily/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/metrics/</guid><description>Hmily Metrics At present,Prometheus is used to collect metrics in hmily&amp;rsquo;s metrics module, and the pull mode is used to expose metrics information interface.
The metrics collected fall into two fundamental categories:
JVM information to application: Memory, CPU, Thread Usage, etc.
Transaction information: including the transactions total, the transaction latency, the transaction status, the transaction role.
Hmily Metrics in detail How to show You can pull the metrics information from the metrics configuration of application via Grafana.</description></item><item><title>Hmily Team</title><link>/projects/hmily/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/team/</guid><description> Project members (the names not listed in order) Name github Role Company Xiao Yu yu199195 VP JD Zhang Yong Lun tuohai666 committer JD Zhao Jun cherrylzhao committer China Unicom Chen Bin prFor committer A startup company Jiang Xiao Feng SteNicholas committer Alibaba Cloud Li Lang cysy-lli committer Ctrip Tang Yu Dong tydhot committer perfma</description></item><item><title>Hmily Term</title><link>/projects/hmily/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/term/</guid><description>Term Initiator: The initiator of a global transaction, the first place where transactions need to be performed on distributed resources in a request link resource method. In the Hmily framework, it can be expressed as: a request first encounters @HmilyTCC or @HmilyTAC annotated method, the method which application belongs to is called the initiator.
Participants: Distributed services or resources that need to participate in a distributed transaction scenario together with other services.</description></item><item><title>Hmily Transaction Context</title><link>/projects/hmily/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/context/</guid><description>Hmily Transaction Context @Data public class HmilyTransactionContext { /** * transId. */ private Long transId; /** * participant id. */ private Long participantId; /** * participant ref id. */ private Long participantRefId; /** * this hmily action. */ private int action; /** * Transaction Participant Role. */ private int role; /** * transType. */ private String transType; } HmilyTransactionContext is the core class used by the Hmily distributed transaction framework to pass the transaction context when making RPC calls.</description></item><item><title>Hmily-Admin</title><link>/projects/hmily/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/admin/</guid><description>Hmily-Admin startup tutorial (not completed）: Admin is the background management system for viewing transaction logs in Hmily. It has many features, Such as viewing abnormal logs, modifying the number of retries and so on.
First, make sure that your project is using Hmily and is running properly.
Second, the JDK used by the user must be 1.8+. Git and Maven are installed locally, then execute the following command</description></item><item><title>Hmily-Config</title><link>/projects/hmily/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config/</guid><description>Configuration Detail： File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
hmily: server: configMode: local appName: xiaoyu # The following configuration will be read when server.configMode equals local config: appName: xiaoyu serializer: kryo contextTransmittalMode: threadLocal scheduledThreadMax: 16 scheduledRecoveryDelay: 60 scheduledCleanDelay: 60 scheduledPhyDeletedDelay: 600 scheduledInitDelay: 30 recoverDelayTime: 60 cleanDelayTime: 180 limit: 200 retryMax: 10 bufferSize: 8192 consumerThreads: 16 asyncRepository: true autoSql: true phyDeleted: true storeDays: 3 repository: mysql repository: database: driverClassName: com.</description></item><item><title>Hmily-Config-Apollo</title><link>/projects/hmily/config-apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-apollo/</guid><description>Local Configuration File Name : hmily.yml.
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = apollo
The framework will pull the configuration according to your configured apollo.
hmily: server: configMode: apollo appName: # The following configuration will be read when server.</description></item><item><title>Hmily-Config-Consul</title><link>/projects/hmily/config-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-consul/</guid><description>Local Configuration File Name: hmily.yml。
Path: The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = consul
The framework will pull the configuration according to your configured consul.
hmily: server: configMode: consul appName: xxxxx remote: consul: hostAndPort: 127.</description></item><item><title>Hmily-Config-Etcd</title><link>/projects/hmily/config-etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-etcd/</guid><description>Local Configuration File Name: hmily.yml. Path: The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource The specific contents are as follows : Notice setting hmily.server.configMode = etcd The framework will pull the configuration according to your configured etcd. hmily: server: configMode: etcd appName: xxxxx # The following</description></item><item><title>Hmily-Config-Local</title><link>/projects/hmily/config-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-local/</guid><description>Local Configuration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = local
All configurations of the framework base on your local configuration files.
Notice that the configurations of repository are extensions of SPI, you can select one from those modes, which don&amp;rsquo;t have to be configured all.</description></item><item><title>Hmily-Config-Nacos</title><link>/projects/hmily/config-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-nacos/</guid><description>Local Conguration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = naocs
The framework will pull the configuration from your configured nacos.
hmily: server: configMode: nacos appName: # The following configuration will be read when server.</description></item><item><title>Hmily-Config-Zookeeper</title><link>/projects/hmily/config-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-zookeeper/</guid><description>Local Configuration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = zookeeper
The framework will pull the configuration from your configured zookeeper.
hmily: server: configMode: zookeeper appName: # The following configuration will be read when server.</description></item><item><title>Hmily-TAC</title><link>/projects/hmily/tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tac/</guid><description>TAC The TAC mode is actually a variant of the TCC mode. Just as the name implies, the TAC mode is called automatic rollback. As compared with the TCC mode, the user doesn&amp;rsquo;t have to concern about how to write the rollback method at all. and then it can reduces user development volume and is entirely transparent to users.
TAC Mode is only suitable for Relational Database.
TAC Mode will intercept the user&amp;rsquo;s SQL statement to generate reverse rollback SQL, and the compatibility of SQL will also be a ordeal.</description></item><item><title>Hmily-code-conduct</title><link>/projects/hmily/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/code-conduct/</guid><description>Development Guidelines Intentions Write codes with heart. Pursue clean, simplified and extremely elegant codes. Readable The code is unambiguous, and the intention of the code is revealed through reading rather than debugging. Tidy Agree with concepts in and . Consistent Be familiar with codes already had, to keep consistent with the style and use. Simplified Express meaning with the least code. Highly reusable, no duplicated codes or configurations. Delete codes out of use in time.</description></item><item><title>Hmily-committer</title><link>/projects/hmily/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/committer/</guid><description>Committer Promotion After you have made a lot of contributions, the community will invite you join Committers
Become a committer you will have
Hmily repository write permissions
Idea free license
Committer Responsibilities Develop new features; Refactor codes; Review pull requests reliably and in time; Consider and accept feature requests; Answer questions; Update documentation and example; Improve processes and tools; Guide new contributors join community. Committer Routine Committer needs to check the list of pull requests and issues to be processed in the community on a daily basis and assign them to the appropriate committer, that is, assignee.</description></item><item><title>Hmily-contributor</title><link>/projects/hmily/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/contributor/</guid><description>You can report a bug, submit a new function enhancement suggestion, or submit a pull request directly.
Submit an Issue Before submitting an issue, please go through a comprehensive search to make sure the problem cannot be solved just by searching. Check the Issue List to make sure the problem is not repeated. Create a new issue and choose the type of issue. Define the issue with a clear and descriptive title.</description></item><item><title>Hmily-tcc</title><link>/projects/hmily/tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tcc/</guid><description>TCC The TCC Mode is a classic flexible transaction solution that needs the users to provided try, confirm, cancel methods. The try, confirm methods will be invoked under normal circumstances,and the try, cancel methods will be invoked as an exception occurs. the confirm method is not required,it entirely depends on the users how to implement the try method. the both confirm and cancel method also need the users to guarantee the idempotency, but it will bring addtional workload to the users.</description></item><item><title>Hodor Introduction</title><link>/projects/hodor/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hodor/overview/</guid><description> The document is improving</description></item><item><title>Hystrix Plugin</title><link>/projects/soul/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/hystrix-plugin/</guid><description>Explanation Hystrix plugin is the core implementation used by gateway to fuse traffic. Use semaphores to process requests. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; hystrix, set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Plugin Instruction Introduce hystrix dependency in the pom.xml file of the gateway. &amp;lt;!-- soul hystrix plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-hystrix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>Integrate Http with soul gateway</title><link>/projects/soul/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/http-proxy/</guid><description>Features This chapter is a guide about integrating Http service with soul gateway. Soul gateway uses divide plugin handling http request, pls enable it in soul-admin background. Please start soul-admin successfully before integrating and Environment Setup is Ok. Configure soul gateway as Http proxy. Add these dependencies in gateway&amp;rsquo;s pom.xml: &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Integrate dubbo with soul gateway</title><link>/projects/soul/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/dubbo-proxy/</guid><description>Features This chapter is a guide about integrating dubbo service with soul gateway. Support Alibaba Dubbo(&amp;lt; 2.7.x) and Apache Dubbo (&amp;gt;=2.7.x). Please start soul-admin successfully before integrating, and Environment Setup is Ok. Configure soul gateway as Dubbo proxy Add these dependencies in gateway&amp;rsquo;s pom.xml. Alibaba dubbo user, configure the dubbo version and registry center with yours.
&amp;lt;!--soul alibaba dubbo plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-alibaba-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>Jinx Introduction</title><link>/projects/jinx/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/jinx/overview/</guid><description> Spring-boot framework which use netty as httpServer instead of tomcat.
Spring-boot user import jar
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.happylife.netty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;happylife-netty&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the following code to the application class of spring boot:
@Bean public EmbeddedServletContainerFactory servletContainer(){ NettyContainerConfig nettyContainerConfig = new NettyContainerConfig(); NettyEmbeddedServletContainerFactory factory = new NettyEmbeddedServletContainerFactory(nettyContainerConfig); return factory; }</description></item><item><title>Logging Plugin</title><link>/projects/soul/logging-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/logging-plugin/</guid><description>Explanation When making invokes to the target service, soul gateway also allows users to print the request information in the log that includes the request path, request method, request parameters, response header, response body &amp;hellip;etc. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; logging, set to enable. Introduce logging support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background.</description></item><item><title>MetaData Concept Design</title><link>/projects/soul/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/meta-data/</guid><description>Description This article mainly explains the concept,design of metadata and how to connect in the soul gateway. Technical Solutions Add a new table in the database,and data can synchronize to the JVM memory of gateway according to the data synchronization scheme.
Table Structure:
CREATE TABLE IF NOT EXISTS `meta_data` ( `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;id&#39;, `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;application name&#39;, `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path,not repeatable&#39;, `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path description&#39;, `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;rpc type&#39;, `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;service name&#39;, `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;method name&#39;, `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;multiple parameter types, split by comma&#39;, `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;rpc extension information,json format&#39;, `date_created` datetime(0) NOT NULL COMMENT &#39;create date&#39;, `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#39;update date&#39;, `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT &#39;enable status&#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Metadata design as below,the most important is using it in dubbo&amp;rsquo;s generalization call.</description></item><item><title>Monitor Plugin</title><link>/projects/soul/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/monitor-plugin/</guid><description>Explanation Monitor plugin is used to monitor its own running status(JVM-related) by gateway, include request response delay, QPS, TPS, and other related metrics. Technical Solutions Flow Diagram Make even tracking in soul gateway by asynchronous or synchronous mode.
The prometheus server pulls metrics&amp;rsquo; through http request, and then displays it by Grafana.
Plugin Setting In soul-admin&amp;ndash;&amp;gt; plugin management-&amp;gt; monitor, set to enable.</description></item><item><title>Motan Quick Start</title><link>/projects/hmily/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-motan/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-dubbo Module and Run Build with Maven Configuring（hmily-demo-motan-account module for instance） Configure with your business database in application.yml(account module for instance) spring: datasource: driver-class-name: com.</description></item><item><title>Motan User</title><link>/projects/myth/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/motan-user/</guid><description>Add myth-annotation dependency to motan api project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Myth annotation to the motan Interface method and set the name of the message queue, which is the queue from which the messaging middleware sends messages. @Myth(destination = &amp;quot;account&amp;quot;) boolean payment(AccountDTO accountDTO); In the motan service provider (the participating method of the transaction, the callee).
add myth-motan dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description></item><item><title>Motan User Guide</title><link>/projects/hmily/user-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-motan/</guid><description>Motan Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions. public interface HelloService { @Hmily void say(String hello); } The project with Motan implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Motan user guide</title><link>/projects/raincat/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/motan-user/</guid><description>Firstly, you should bootstrap raincat-manager, please refer to how to bootstrap Txmanager for details. Then, please add following dependency in maven at your service, and add @TxTransaction annotation in your distributed transaction method. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-motan&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>Myth Configuration</title><link>/projects/myth/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/config/</guid><description>source code parsing for annotation /** * Myth is the annotation of distributed transaction framework. */ @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) public @interface Myth { /** * The destination name for this listener, resolved through the container-wide */ String destination(); /** * Target interface class * If you are a SpringCloud user, you need to specify the target interface service. * (Since SpringCloud is an HTTP request that cannot be invoked through reflection</description></item><item><title>Myth Introduction</title><link>/projects/myth/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/overview/</guid><description>An open source framework that uses message queue to solve distributed transactions. Developed based on Java language (JDK1.8), it supports Dubbo, SpringCloud, Motan and other RPC frameworks for distributed transactions.
Features Integrate spring-boot-starter. RPC framework support: dubbo,motan,springcloud. Message middleware suooprt : jms(activimq), amqp(rabbitmq), kafka, roceketmq. Local transaction storage support: redis, mogondb, zookeeper, file, mysql. Transaction log serialization support ：java，hessian，kryo，protostuff. Aspect AOP facets are used to integrate with Spring and support clustering, high availability and high concurrency.</description></item><item><title>Myth-admin startup tutorial</title><link>/projects/myth/start-myth-admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/start-myth-admin/</guid><description>Startup premise: the distributed transaction project has been deployed and running, and users use it according to their own RPC framework.
First, the JDK must be 1.8+, and Git and Maven are installed locally. Execute the following command.
git clone https://github.com/yu199195/myth.git maven clean install Open the project with your development tool，for example Idea , Eclipse.
Step One: Edit application.properties in myth-admin project. server.port=8888 server.</description></item><item><title>Plugin Context Path Mapping</title><link>/projects/soul/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/context-path-plugin/</guid><description>Explanation When making invokes to the target service, soul Gateway also allows users to customize the context using the context_path plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; context_path, set to enable. Introduce context_path support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- soul context_path plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-context-path&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>Plugin Handle Explanation</title><link>/projects/soul/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/plugin-handle-explanation/</guid><description>Explanation In our Soul-Admin background, each plugin uses the Handle field to represent a different processing, and plugin processing is used to manage and edit custom processing fields in JSON. This feature is mainly used to support the plug-in handling template configuration Table Design sql
CREATE TABLE IF NOT EXISTS `plugin_handle` ( `id` varchar(128) NOT NULL, `plugin_id` varchar(128) NOT NULL COMMENT &#39;plugin id&#39;, `field` varchar(100) NOT NULL COMMENT &#39;field&#39;, `label` varchar(100) DEFAULT NULL COMMENT &#39;label&#39;, `data_type` smallint(6) NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;data type 1 number 2 string 3 select box&#39;, `type` smallint(6) NULL COMMENT &#39;type, 1 means selector, 2 means rule&#39;, `sort` int(4) NULL COMMENT &#39;sort&#39;, `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;extra configuration (json format data)&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`), UNIQUE KEY `plugin_id_field_type` (`plugin_id`,`field`,`type`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Tutorial eg.</description></item><item><title>Questions</title><link>/projects/hmily/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/faq/</guid><description>I have imported the jar package to my project, but found that my project cannot be started, what should I do if any error reported? Answer : When you meet this kind of error, it requires you to locate the problem yourself, you can check the items as bellow: check whether the framework configuration is carried out according to the document whether your project runtime environment is correct whether there is any dependency conflict problem If your problem is still present after above check items, you can provide an issue on github of this project, our team will provide technique support as soon as possible.</description></item><item><title>Quick Start Dubbo</title><link>/projects/myth/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/quick-start-dubbo/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-dubbo
Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware
spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title>Quick Start Motan</title><link>/projects/myth/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/quick-start-motan/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-motan
Modifiy application.yml on Indicator Item And Modifiy you jdbc url And zookeeper url And choose you Message Oriented Middleware
spring: motan: zookeeper: 192.168.1.148:2181 datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title>Quick Start SpringCloud</title><link>/projects/myth/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/quick-start-springcloud/</guid><description>cd https://github.com/yu199195/myth/tree/master/myth-demo/myth-demo-springcloud
run EurekaServerApplication.java
Modifiy application.yml on Indicator Item And Modifiy you jdbc url And choose you Message Oriented Middleware
spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://192.168.1.68:3306/myth_account?useUnicode=true&amp;amp;characterEncoding=utf8 username: xiaoyu password: Wgj@555888 #activemq: # broker-url: tcp://120.76.52.162:61616 # user: happylife # password: happylifeplat01 # trust-all: true #rabbitmq: # host: localhost # port: 5672 # username: guest # password: guest rocketmq: namesrvAddr: 192.168.1.148:9876 consumerGroupName: account instanceName: account #kafka: # consumer: # bootstrap-servers: localhost:9092 # group-id: test # auto-offset-reset: earliest # enable-auto-commit: true # auto-commit-interval: 100 # key-deserializer: org.</description></item><item><title>Quick start with Dubbo</title><link>/projects/soul/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/quick-start-dubbo/</guid><description>This document introduces how to quickly access the Soul Gateway using Dubbo. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap, In addition, if you use ZooKeeper for Dubbo, you need to download it in advance.
Run the soul-examples-dubbo project Downloadsoul-examples-dubbo, replace the register address in spring-dubbo.xml with your local zk address, such as:</description></item><item><title>Quick start with SpringCloud</title><link>/projects/soul/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/quick-start-springcloud/</guid><description>This document introduces how to quickly access the Soul Gateway using SpringCloud. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Add the following dependencies to the soul-bootstrap&amp;rsquo;s pom.xml file: &amp;lt;!--soul springCloud plugin start--&amp;gt; dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- If using Eureka as a registry needs to be introduced --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Quick start with Tars</title><link>/projects/soul/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/quick-start-tars/</guid><description>This document introduces how to quickly access the Soul Gateway using Tars. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Note: soul-bootstrap need to import tars dependencies
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-tars&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.tencent.tars&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tars-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Run the soul-examples-tars project Download soul-examples-tars
Modify host in application.yml to be your local IP</description></item><item><title>Quick start with grpc</title><link>/projects/soul/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/quick-start-grpc/</guid><description>This document introduces how to quickly access the Soul Gateway using Grpc. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Note: soul-bootstrap need to import grpc dependencies
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-grpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Run the soul-examples-grpc project Download soul-examples-grpc
Run the following command under soul-examples-grpc to generate Java code
mvn protobuf:compile mvn protobuf:compile-custom Execute the org.</description></item><item><title>Quick start with http</title><link>/projects/soul/quick-start-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/quick-start-http/</guid><description>This document introduces how to quickly access the Soul Gateway using Http. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap.
Introducing gateway to HTTP proxy plugin
Add the following dependencies to the soul-bootstrap&amp;rsquo;s pom.xml file: &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>Quick start with sofa</title><link>/projects/soul/quick-start-sofa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/quick-start-sofa/</guid><description>This document introduces how to quickly access the Soul Gateway using Sofa RPC. You can get the code example of this document by clicking here.
Environment to prepare Please refer to the setup and launch soul-admin and soul-bootstrap, In addition, if you use ZooKeeper for Sofa, you need to download it in advance.
Note: soul-bootstrap need to import sofa dependencies
&amp;lt;!-- soul sofa plugin starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sofa-rpc-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${sofa.rpc.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Raincat Introduction</title><link>/projects/raincat/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/overview/</guid><description>Raincat Strongly consistent distributed transactions are implemented based on two-phase commit + local transaction compensation mechanism. Principle
It is based on Java language (JDK1.8), supports Dubbo, Motan, Springcloud for distributed transactions.
Due to the file name is too long, you can executes git config --global core.longpaths true when pulling the code.
Features Frame features
Seamlessly integrate spring or spring boot.
Support Dubbo, Motan, Springcloud, and other RPC frameworks for distributed transactions.</description></item><item><title>RateLimiter Plugin</title><link>/projects/soul/rate-limiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/rate-limiter-plugin/</guid><description>Explanation rateLimiter is core implementation of gateway restrictions on network traffic.
The soul gateway provides a variety of current limiting algorithms, including token bucket algorithm, concurrent token bucket algorithm, leaky bucket algorithm and sliding time window algorithm.
The implementation of current limiting algorithm of soul gateway is based on redis.
You can set to the interface level or the parameter level. How to use it depends on your traffic configuration.</description></item><item><title>Redirect Plugin</title><link>/projects/soul/redirect-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/redirect-plugin/</guid><description>Explanation When the soul gateway makes proxy calls to the target service, it also allows users to use the redirect plugin to redirect requests.
Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; redirect ,set to enable。 Introduce redirect support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. Selectors and rules, only matching requests will be forwarded and redirected, please see: Selector rules。 Maven Dependency Add the plugin dependency in the pom.</description></item><item><title>Register Center Access</title><link>/projects/soul/register-center-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/register-center-access/</guid><description>Explain Explain register center access config
HTTP Registry Soul-Admin Set the config in application.yml soul: register: registerType: http props: checked: true # is checked zombieCheckTimes: 5 # How many times does it fail to detect the service scheduledTime: 10 # Timed detection interval time Soul-Client Set the config in application.yml soul: client: registerType: http serverLists: http://localhost:9095 props: contextPath: /http appName: http port: 8188 isFull: false # registerType : register type, set http # serverList: when register type is http，set Soul-Admin address list，pls note &#39;http://&#39; is necessary.</description></item><item><title>Register Center Design</title><link>/projects/soul/register-center-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/register-center-design/</guid><description>Description This article mainly explains three ways of register center and their principles. Client When client server start, the register center client will be loaded by spi.
Put data to Disruptor when spring bean load.
Soul register client get data from Disruptor, and it will send request to register server.
Disruptor can decouple data from operation and facilitate expansion.
Server When Soul-Admin server start, register center server will be loaded by spi.</description></item><item><title>Resilience4j Plugin</title><link>/projects/soul/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/resilience4j-plugin/</guid><description>Explanation Resilience4j is one of the options that supports flow control and circuit breaking. Resilience4j supports flow control and circuit breaking functions for gateway. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; resilience4j set to enable. If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin. Plugin Usage Introducing the follow supports to the pom.xml file of soul project. &amp;lt;!-- soul resilience4j plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Rewrite Plugin</title><link>/projects/soul/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/rewrite-plugin/</guid><description>Explanation When making proxy invokes to the target service, soul Gateway also allows users to rewrite the request path using the rewrite plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; rewrite ,set to enable. Introduce rewrite support in the pox.xml file of the gateway. If the user don&amp;rsquo;t use, please disable the plugin in the background. &amp;lt;!-- soul rewrite plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-rewrite&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>SOFA-RPC User Guide</title><link>/projects/hmily/user-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-rpc/</guid><description>SOFA-RPC Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions.
public interface HelloService { @Hmily void say(String hello); } The project with SOFA-RPC implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Selector Detailed Explanation</title><link>/projects/soul/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/selector-and-rule/</guid><description>Features Selector and rule are the key point of soul gateway, you can manage any request with it.
This chapter is mainly focus on the concepts of selector and rule and how to use it.
Overview One plugin has many selector and a selector has many rules, selector is the first filter of request, and the rule is the final filter. Please consider this, it would be perfect when the plugin executes the request until it reached the config value.</description></item><item><title>Sentinel Plugin</title><link>/projects/soul/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sentinel-plugin/</guid><description>Explanation Sentinel is one of the options that supports flow control and circuit breaking. Sentinel supports flow control and circuit breaking functions for gateway. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; sentinel set to enable. If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin. Plugin Usage Introducing the follow supports to the pom.xml file of soul project. &amp;lt;!-- soul sentinel plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>Sign Plugin</title><link>/projects/soul/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sign-plugin/</guid><description>Explanation Sign is a native plugin of soul Gateway and is used to process signature authentication of requests. Plugin Setting In soul-admin -&amp;gt; plugin management &amp;ndash;&amp;gt; sign set to enable. Plugin Usage Introducing sign dependency in the pom.xml file of the gateway &amp;lt;!-- soul sign plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sign&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- soul sign plugin end--&amp;gt; Selectors and rules, please refer to: selector.</description></item><item><title>Sofa Plugin</title><link>/projects/soul/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sofa-plugin/</guid><description>Description The sofa plug-in is a plug-in that converts the HTTP protocol into the sofa protocol, and it is also the key to the gateway to realize the sofa generalization call. sThe sofa plug-in needs to cooperate with metadata to realize the call of Dubbo. Please refer to: Metadata。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sofa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Settings First, go to soul-admin &amp;ndash;&amp;gt; plug-in management-&amp;gt; setting sofa is open.</description></item><item><title>Sofa RPC Proxy</title><link>/projects/soul/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sofa-rpc-proxy/</guid><description>Description This article is about sofa users using sofa plug-in support,and the tutorial of connecting your own sofa service to the soul gateway. Before connecting, please start soul-admin correctly and Setup Environment Ok。 Introduce the plug-in that the gateway supports for sofa Add the following dependencies in the gateway&amp;rsquo;s pom.xml file： Replace the sofa version with yours, and replace the jar package in the registry with yours, The following is a reference。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description></item><item><title>Soul Code Conduct</title><link>/projects/soul/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/code-conduct/</guid><description>Development Guidelines Write codes with heart. Pursue clean, simplified and extremely elegant codes. Agree with concepts in &amp;lt;Refactoring: Improving the Design of Existing Code&amp;gt; and &amp;lt;Clean Code: A Handbook of Agile Software Craftsmanship&amp;gt;. Be familiar with codes already had, to keep consistent with the style and use. Highly reusable, no duplicated codes or configurations. Delete codes out of use in time. Contributor Covenant Submitting of Conduct Make sure all the test cases are passed, Make sure .</description></item><item><title>Soul Committer</title><link>/projects/soul/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/committer/</guid><description>Committer Promotion After you have made a lot of contributions, the community will nominate. Become a committer you will have
Permissions written by Soul repository Idea is used legally Committer Responsibilities Develop new features; Refactor codes; Review pull requests reliably and in time; Consider and accept feature requests; Answer questions; Update documentation and example; Improve processes and tools; Guide new contributors join community. Committer Routine A committer needs to review every day the Pull Request and issue list to be processed by the community, and assign a suitable committer, that is, Assignee.</description></item><item><title>Soul Contributor</title><link>/projects/soul/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/contributor/</guid><description>You can report a bug, submit a new function enhancement suggestion, or submit a pull request directly.
Submit an Issue Before submitting an issue, please go through a comprehensive search to make sure the problem cannot be solved just by searching. Check the Issue List to make sure the problem is not repeated. Create a new issue and choose the type of issue. Define the issue with a clear and descriptive title.</description></item><item><title>Soul Introduction</title><link>/projects/soul/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/overview/</guid><description> What is the Soul? This is an asynchronous, high-performance, cross-language, responsive API gateway.
Features Support various languages (http protocol), support dubbo, spring-cloud, Grpc, Motan, Sofa, Tars protocol. Plugin design idea, plugin hot swap, easy to expand. Flexible flow filtering to meet various flow control. Built-in rich plugin support, authentication, limiting, fuse, firewall, etc. Dynamic flow configuration, high performance. Support cluster deployment, A/B Test, blue-green release. Architecture Diagram</description></item><item><title>Soul Optimize</title><link>/projects/soul/soul-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/soul-optimize/</guid><description>Description This doc shows how to do performance optimization for soul. Time Consumption Soul is JVM driven and processing time for a single request is nearly between 1-3 ms. Netty Optimization spring-webflux is one of dependencies of soul, and it uses Netty in lower layer. The demo down below demonstrates tuning soul by customizing params in Netty. @Bean public NettyReactiveWebServerFactory nettyReactiveWebServerFactory() { NettyReactiveWebServerFactory webServerFactory = new NettyReactiveWebServerFactory(); webServerFactory.</description></item><item><title>Spring Cloud User Guide</title><link>/projects/hmily/user-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-springcloud/</guid><description>Spring-Cloud User Guide Step 1: Introduce the jar packages
Step 2: Introduce the Hmily configuration
Step 3: Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Step 4: Add @Hmily annotation on the feignClient call method(Consumer side).
1.Introduce The Maven dependency Spring-Namespace Introduce the hmily-springcloud dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below: &amp;lt;!</description></item><item><title>SpringCloud Plugin</title><link>/projects/soul/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/spring-cloud-plugin/</guid><description>Explanation This plugin is the core of transforming http protocol into springCloud protocol. Introducing Plugin Support of SpringCould Gateway Introducing those dependencies in the pom.xml file of the gateway. &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; springCloud, set to enable.</description></item><item><title>SpringCloud Proxy</title><link>/projects/soul/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/spring-cloud-proxy/</guid><description>Features This article is a guide about how to integrate Spring Cloud with soul gateway quickly. Please enable springCloud plug-in in soul-admin background. Please start soul-admin successfully before integrating and Environment Setup is Ok. Configure soul gateway as Spring Cloud proxy add these dependencies in gateway&amp;rsquo;s pom.xml: &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>SpringCloud Quick Start</title><link>/projects/hmily/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-springcloud/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-dubbo Module and Run Build with Maven Run with EurekaServerApplication.java in hmily-demo-springcloud-eureka project. Configuring（hmily-demo-springcloud-account module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.</description></item><item><title>SpringCloud User</title><link>/projects/myth/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/springcloud-user/</guid><description>In the springcloud service provider (the participating method of the transaction, the called party). add myth-springcloud dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.myth&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;myth-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Configure MythTransactionBootstrap to start the class, either as XML or as @Bean. Specific configuration can refer to here:configuration for details. &amp;lt;context:component-scan base-package=&amp;quot;com.github.myth.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;mythTransactionBootstrap&amp;quot; class=&amp;quot;com.github.myth.core.bootstrap.MythTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;repositorySuffix&amp;quot; value=&amp;quot;account-service&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorQueueMax&amp;quot; value=&amp;quot;5000&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;coordinatorThreadMax&amp;quot; value=&amp;quot;8&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;rejectPolicy&amp;quot; value=&amp;quot;Abort&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;blockingQueueType&amp;quot; value=&amp;quot;Linked&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;repositorySupport&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property</description></item><item><title>Springcloud user guide</title><link>/projects/raincat/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/springcloud-user/</guid><description>Firstly, you should bootstrap raincat-manager, please refer to how to bootstrap Txmanager for details. Then, please add following dependency in maven at your service, and add @TxTransaction annotation in your distributed transaction method. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;raincat-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure TxTransactionBootstrap by Spring XML &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>Tars Quick Start</title><link>/projects/hmily/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-tars/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Setting tars nodes Build tars nodes with following information refering to here:
APP: TestInventory, Server Name: InventoryApp, OBJ: InventoryObj, Port: 29740 APP: HmilyAccount, Server Name: AccountApp, OBJ: AccountObj, Port: 10386 With nodes built, run mvn clean package packaging command respectively under hmily-demo-tars-springboot-account and hmily-demo-tars-springboot-inventory directories, and publish with outputs on previous nodes set.</description></item><item><title>Tars User Guide</title><link>/projects/hmily/user-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-tars/</guid><description>Tars User Guide Step 1: Introduce the jar packages
Step 2: Introduce the Hmily configuration
Step 3: Add @Hmily annotation on the auto-generated Servant interface method which required the Hmily Distributed Transaction.
Step 4: Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Introduce The Maven dependency Spring-Namespace
Introduce the hmily-tars dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-tars&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below:</description></item><item><title>Team Introduction</title><link>/projects/soul/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/team/</guid><description> Team Member（In no particular order） Name Github Role Company Xiao Yu yu199195 VP jd.com Zhang Yonglun tuohai666 PMC jd.com Deng Liming dengliming PMC a start-up company Tang Yudong tydhot PMC perfma Zhang lei SaberSola PMC helloglobal Huang Xiaofeng huangxfchn committer shein Ding jianming nuo-promise committer a start-up company Feng Zhenbing fengzhenbing committer a start-up company yangze HoldDie committer IBM</description></item><item><title>Thread Model</title><link>/projects/soul/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/thread/</guid><description>Description This article gives an introduction to thread models in soul and usage in various scenarios. IO And Work Thread spring-webflux is one of dependencies of soul, and it uses Netty thread model in lower layer. Business Thread Use scheduling thread to execute by default. A fixed thread pool manages business threads, the number of threads is count in this formula: cpu * 2 + 1.</description></item><item><title>TxTransactionBootstrap Configuration</title><link>/projects/raincat/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/config/</guid><description>@TxTransaction annotation This annotation is the aspect of distributed transaction, it need to be added when the business side need distributed transaction. TxTransactionBootstrap Configuration： &amp;lt;context:component-scan base-package=&amp;quot;org.dromara.raincat.*&amp;quot;/&amp;gt; &amp;lt;aop:aspectj-autoproxy expose-proxy=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;bean id=&amp;quot;txTransactionBootstrap&amp;quot; class=&amp;quot;org.dromara.raincat.core.bootstrap.TxTransactionBootstrap&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;txManagerUrl&amp;quot; value=&amp;quot;http://localhost:8761&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;serializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettySerializer&amp;quot; value=&amp;quot;kryo&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;bufferSize&amp;quot; value=&amp;quot;4096&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;nettyThreadMax&amp;quot; value=&amp;quot;16&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;refreshInterval&amp;quot; value=&amp;quot;30&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;delayTime&amp;quot; value=&amp;quot;30&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;heartTime&amp;quot; value=&amp;quot;10&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;recoverDelayTime&amp;quot; value=&amp;quot;60&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;retryMax&amp;quot; value=&amp;quot;3&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationRecoverTime&amp;quot; value=&amp;quot;60&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;compensationCacheType&amp;quot; value=&amp;quot;db&amp;quot;/&amp;gt; &amp;lt;property name=&amp;quot;txDbConfig&amp;quot;&amp;gt; &amp;lt;bean class=&amp;quot;org.</description></item><item><title>Use Different Data-Sync Strategy</title><link>/projects/soul/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/use-data-sync/</guid><description>Features Data synchronization is the key of gateway high performance, which is to sync &amp;lsquo;soul-admin&amp;rsquo; config data into the JVM memory of soul cluster. Implementation principles, pls refer to：dataSync。 In the article, the gateway is the environment you setup. please refer to：Environment Setup. Websocket sync（default method，recommend） gateway setting（note:restart）
Add these dependencies in pom.xml： &amp;lt;!--soul data sync start use websocket--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-sync-data-websocket&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; add these config values in springboot yaml file: soul : sync: websocket : urls: ws://localhost:9095/websocket #urls: address of soul-admin，multi-address will be splitted with (,).</description></item><item><title>Waf Plugin</title><link>/projects/soul/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/waf-plugin/</guid><description>Explanation Waf is the core implementation of gateway to realize firewall function for network traffic. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; waf set to enable. If the user don&amp;rsquo;t use, please disable the plugin in the background. Add configuration mode in plugin editing. {&amp;quot;model&amp;quot;:&amp;quot;black&amp;quot;} # The default mode is blacklist mode; If setting is mixed, it will be mixed mode. We will explain it specifically below.</description></item><item><title>Websocket Plugin</title><link>/projects/soul/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/websocket-plugin/</guid><description>Explanation Soul gateway also support proxy of websocket. In websocket support, divide plugin is used in it. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; divide, set to enable. Introducing dependencies in the pom.xml file of the gateway &amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Request Path When using soul proxy websocket, its request path is (example):ws://localhost:9195/?</description></item><item><title>dubbo quick start</title><link>/projects/raincat/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-dubbo/</guid><description>Environment JDK 1.8+ Maven 3.2.x Git Redis Mysql Pull the code &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U Prepare the database Execute the SQL statement in demo. SQL statement
Configuration Please open the project in IDEA or Eclipse, and modify the Redis configuration in application.yml. tx: manager: netty : port: 9998 serialize: kryo maxConnection: 100 maxThreads : 16 delayTime : 5 heartTime : 20 redis : cluster : false hostName : 192.</description></item><item><title>sofa-rpc Quick Start</title><link>/projects/hmily/quick-start-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-rpc/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-sofa Module and Run Build with Maven Configuring（hmily-demo-sofa-account module for instance） Configure with your business database in application.yml spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?</description></item><item><title>springcloud quick start</title><link>/projects/raincat/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-springcloud/</guid><description>Environment JDK 1.8+ Maven 3.2.x Git Redis Mysql Pull the code &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U Prepare the database Execute the SQL statement in demo. SQL statement
Configuration Please open the project in IDEA or Eclipse, and modify the Redis configuration in application.yml. tx: manager: netty : port: 9998 serialize: kryo maxConnection: 100 maxThreads : 16 delayTime : 5 heartTime : 20 redis : cluster : false hostName : 192.</description></item></channel></rss>