<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hmily on dromara(Open source organization)</title><link>/zh/projects/hmily/</link><description>Recent content in Hmily on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/zh/projects/hmily/index.xml" rel="self" type="application/rss+xml"/><item><title>Dubbo快速体验</title><link>/zh/projects/hmily/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-dubbo/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Grpc快速体验</title><link>/zh/projects/hmily/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-grpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Grpc用户指南</title><link>/zh/projects/hmily/user-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-grpc/</guid><description>Grpc用户指南 目前只支持grpc的一元同步调用 引入jar包 引入hmily配置 在具体的实现方法上（服务提供端），加上@HmilyTCC or HmilyTAC 注</description></item><item><title>Hmily 介绍</title><link>/zh/projects/hmily/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/overview/</guid><description>Hmily是什么？ Hmily是一款高性能，零侵入，金融级分布式事务解决方案，目前主要提供柔性事务的支持，包含 TCC, TAC(自动生成回滚SQL) 方</description></item><item><title>Hmily-Admin</title><link>/zh/projects/hmily/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/admin/</guid><description>Hmily-Admin 启动教程（未完成）: admin 是Hmily中查看事务日志的后台管理系统。 可以查看异常的日志，修改重试次数等功能. 首先确保你的项目使用了Hmily并</description></item><item><title>Hmily-Config</title><link>/zh/projects/hmily/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config/</guid><description>配置详解： 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf</description></item><item><title>Hmily-Config-Apollo</title><link>/zh/projects/hmily/config-apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-apollo/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Consul</title><link>/zh/projects/hmily/config-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-consul/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Etcd</title><link>/zh/projects/hmily/config-etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-etcd/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Local</title><link>/zh/projects/hmily/config-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-local/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Nacos</title><link>/zh/projects/hmily/config-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-nacos/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Zookeeper</title><link>/zh/projects/hmily/config-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/config-zookeeper/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Context</title><link>/zh/projects/hmily/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/context/</guid><description>HmilyTransactionContext事务上下文 @Data public class HmilyTransactionContext { /** * transId. */ private Long transId; /** * participant id. */ private Long participantId; /** * participant ref id. */ private Long participantRefId; /** * this hmily action. */ private int action; /** * 事务</description></item><item><title>Hmily-Metrics</title><link>/zh/projects/hmily/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/metrics/</guid><description>Metrics 目前hmily的metrics模块，采用 prometheus来进行采集，使用pull模式对外暴露metrics信息接口。 收集的metric</description></item><item><title>Hmily-TCC</title><link>/zh/projects/hmily/tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/tcc/</guid><description>TCC TCC模式是经典的柔性事务解决方案，需要使用者提供 try, confirm, cancel 三个方法， 真正的情况下会执行 try, confirm, 异常情况下会执行try, cancel。 confirm 方法并不是</description></item><item><title>Hmily-annotation</title><link>/zh/projects/hmily/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/annotation/</guid><description>@Hmily /** * The annotation Hmily. * * @author xiaoyu */ @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Hmily { } 该注解为hmily分布式事务接口标识，表示该接口参与hmily分布式事务 @HmilyTCC @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface HmilyTCC { /** * Confirm method string. * * @return the</description></item><item><title>Hmily-code-conduct</title><link>/zh/projects/hmily/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/code-conduct/</guid><description>开发理念 用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理</description></item><item><title>Hmily-committer</title><link>/zh/projects/hmily/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/committer/</guid><description>提交者提名 当你做了很多贡献以后，社区会进行提名。 成为committer你会拥有 hmily仓库写的权限 idea 正版使用 提交者责任 开发新功能； 代码重构</description></item><item><title>Hmily-contributor</title><link>/zh/projects/hmily/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/contributor/</guid><description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。 提交issue 在提交issue之前，请经过充分的搜索，确定该iss</description></item><item><title>Hmily-tac</title><link>/zh/projects/hmily/tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/tac/</guid><description>TAC TAC模式其实是TCC模式的变种,顾名思义 TAC 模式被称为自动回滚,相比于 TCC模式，用户完全不用关心 回滚方法如何去写，减少了用户的开发量，对</description></item><item><title>Motan快速体验</title><link>/zh/projects/hmily/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-motan/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Motan用户指南</title><link>/zh/projects/hmily/user-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-motan/</guid><description>Motan接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Motan</description></item><item><title>SpringCloud快速体验</title><link>/zh/projects/hmily/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-springcloud/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-demo</description></item><item><title>SpringCloud用户指南</title><link>/zh/projects/hmily/user-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-springcloud/</guid><description>Spring-Cloud 用户指南 步骤一: 引入依赖jar包 步骤二：引入hmily配置 步骤三：在具体的实现方法上（服务提供端），加上HmilyTCC or HmilyTAC 注解 步骤四：在</description></item><item><title>dubbo用户指南</title><link>/zh/projects/hmily/user-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-dubbo/</guid><description>Dubbo接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Dubbo</description></item><item><title>sofa-rpc快速体验</title><link>/zh/projects/hmily/quick-start-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-rpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>sofa-rpc用户指南</title><link>/zh/projects/hmily/user-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-rpc/</guid><description>sofa-rpc接口项目 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } so</description></item><item><title>tars快速体验</title><link>/zh/projects/hmily/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/quick-start-tars/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 建立tars节点 根据此文在当前tars平台建立</description></item><item><title>tars用户指南</title><link>/zh/projects/hmily/user-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/user-tars/</guid><description>Tars用户指南 引入jar包 引入hmily配置 在需要进行Hmily分布式事务的自动生成的Servant接口方法上加上 @Hmily 标识。 在具体的实现方法</description></item><item><title>团队介绍</title><link>/zh/projects/hmily/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/team/</guid><description>团队成员（排名不分先后） 名字 github 角色 所在公司 肖宇 yu199195 VP 京东 张永伦 tuohai666 committer 京东 赵俊 cherrylzhao committer 联通 陈斌 prFor committer 某创业公司 李浪 cysy-lli committer 携程 汤煜冬 tydhot committer perfma</description></item><item><title>术语</title><link>/zh/projects/hmily/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/term/</guid><description>术语 发起者：全局事务的发起者，在一个请求链路资源方法里面，最先需要对分布式资源进行事务处理的地方，在Hmily框架里面 可以表示为：一个请求最</description></item><item><title>问题</title><link>/zh/projects/hmily/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh/projects/hmily/faq/</guid><description>我引用了jar包，发现启动不了，报错怎么办？ 答：这种需要你自己去定位问题，查看是否按照文档来进行配置，环境是否正确，是否有依赖冲突问题，实在</description></item></channel></rss>